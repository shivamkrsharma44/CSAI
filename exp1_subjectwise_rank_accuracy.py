# -*- coding: utf-8 -*-
"""Exp1_subjectwise_rank_accuracy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKSNGZpuB0SP-GEZjmnIWmOh8cPa7aQA
"""

from sklearn.linear_model import Ridge
import numpy as np
from scipy.io import loadmat
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from scipy.stats import pearsonr
from sklearn.model_selection import KFold
import json

fmri_pict = loadmat('../input/data/M03/inf_voxels/M03_glove_concepts_pictures.mat')
fmri_wc = loadmat('../input/data/M03/inf_voxels/M03_glove_concepts_wordclouds.mat')
fmri_sent = loadmat('../input/data/M03/inf_voxels/M03_glove_concepts_sentences.mat')

voxels_p_p = fmri_pict['voxels_pictures_final']
voxels_p_s = fmri_pict['voxels_sentences_final']
voxels_p_w = fmri_pict['voxels_wordclouds_final']

voxels_w_p = fmri_wc['voxels_pictures_final']
voxels_w_s = fmri_wc['voxels_sentences_final']
voxels_w_w = fmri_wc['voxels_wordclouds_final']

voxels_s_p = fmri_sent['voxels_pictures_final']
voxels_s_s = fmri_sent['voxels_sentences_final']
voxels_s_w = fmri_sent['voxels_wordclouds_final']

concepts = []
f = open('../data/stimuli_180concepts.txt','r')
lines = f.readlines()

for line in lines:
    concepts.append(line.strip())

glove_vectors = []

f = open('../input/data/vectors_180concepts.GV42B300.txt','r')
lines = f.readlines()

for line in lines:
    line = line.strip().split(' ')
    line = list(map(float, line))
    glove_vectors.append(line)

out_file = open("../input/data/bert_roberta_sentvec.json", "r") 
concept2vec = json.load(out_file)

bert_vectors = []
keys = list(concept2vec['bert'].keys())

for key in keys:
    bert_vectors.append(concept2vec['bert'][key])

roberta_vectors = []
keys = list(concept2vec['roberta'].keys())

for key in keys:
    roberta_vectors.append(concept2vec['roberta'][key])

def accuracy(actual, predicted):
    rank_sum = 0
    
    for i in range(0,len(predicted)):
        b1 = predicted[i]
        true_corr = 0
        corr_score = list()
        for j in range(0, len(actual)):
            s1 = actual[j]
            corr = pearsonr(s1,b1)[0]
            corr_score.append(corr)
            
            if(i == j):
                true_corr = corr
                
        corr_score.sort(reverse = True)
        rank = corr_score.index(true_corr) + 1
        rank_sum += rank
        
    rank_sum = rank_sum/(len(actual))
    
    return(1 - ((rank_sum-1)/(len(actual)-1)))

kf = KFold(n_splits=18)

def train(vectors, train_voxels, test1_voxels, test2_voxels):
    
    dataset_X = np.array(train_voxels.copy())
    dataset_X1 = np.array(test1_voxels.copy())
    dataset_X2 = np.array(test2_voxels.copy())
    
    dataset_Y = np.array(vectors.copy())
    dataset_Y1 = np.array(vectors.copy())
    dataset_Y2 = np.array(vectors.copy())

    accuracies = []
    accuracies1 = []
    accuracies2 = []
    
    actual = []
    predicted = []

    cnt = 0
    for train_index, test_index in kf.split(dataset_X[cnt]):

        X_train, X_test = dataset_X[cnt][train_index], dataset_X[cnt][test_index]
        y_train, y_test = dataset_Y[train_index], dataset_Y[test_index]
        
        
        model = Ridge(alpha=1.0)
        model.fit(X_train,y_train)

        
        y_pred = model.predict(X_test)
        acc = accuracy(y_test,y_pred)
        accuracies.append(acc)
        
        actual.extend(y_test)
        predicted.extend(y_pred)

        # testing data 1
        dataset_Y1_pred= model.predict(dataset_X1[cnt])
        acc1 = accuracy(dataset_Y1, dataset_Y1_pred)
        accuracies1.append(acc1)

        # testing data 2
        dataset_Y2_pred= model.predict(dataset_X2[cnt])
        acc2 = accuracy(dataset_Y2, dataset_Y2_pred)
        accuracies2.append(acc2)
        
        cnt +=1 
        print("fold: ",cnt)
        print("accuracy: ", acc)
        print("accuracy1: ", acc1)
        print("accuracy2: ", acc2)
        print()

    accuracies = np.array(accuracies)
    accuracies1 = np.array(accuracies1)
    accuracies2 = np.array(accuracies2)
    fin_acc = accuracy(actual,predicted)

    return np.mean(accuracies),np.mean(accuracies1),np.mean(accuracies2),fin_acc

"""### Using glove vectors"""

acc,acc1,acc2,fin_acc = train(glove_vectors,voxels_p_p,voxels_p_w,voxels_p_s)
print("Pictures training accuaracy:",round(acc,2))
print("Pictures final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(glove_vectors,voxels_s_s,voxels_s_w,voxels_s_p)
print("Sentences training accuaracy:",round(acc,2))
print("Sentences final training accuaracy:",round(fin_acc,2))
print("Pictures testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(glove_vectors,voxels_w_w,voxels_w_p,voxels_w_s)
print("Wordclouds training accuaracy:",round(acc,2))
print("Wordclouds final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Pictures testing accuracy:",round(acc1,2))
print()

"""### Using bert vectors"""

fmri_pict = loadmat('../input/data/M03/inf_voxels/M03_bert_concepts_pictures.mat')
fmri_wc = loadmat('../input/data/M03/inf_voxels/M03_bert_concepts_wordclouds.mat')
fmri_sent = loadmat('../input/data/M03/inf_voxels/M03_bert_concepts_sentences.mat')

voxels_p_p = fmri_pict['voxels_pictures_final']
voxels_p_s = fmri_pict['voxels_sentences_final']
voxels_p_w = fmri_pict['voxels_wordclouds_final']

voxels_w_p = fmri_wc['voxels_pictures_final']
voxels_w_s = fmri_wc['voxels_sentences_final']
voxels_w_w = fmri_wc['voxels_wordclouds_final']

voxels_s_p = fmri_sent['voxels_pictures_final']
voxels_s_s = fmri_sent['voxels_sentences_final']
voxels_s_w = fmri_sent['voxels_wordclouds_final']

acc,acc1,acc2,fin_acc = train(bert_vectors,voxels_p_p,voxels_p_w,voxels_p_s)
print("Pictures training accuaracy:",round(acc,2))
print("Pictures final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(bert_vectors,voxels_s_s,voxels_s_w,voxels_s_p)
print("Sentences training accuaracy:",round(acc,2))
print("Sentences final training accuaracy:",round(fin_acc,2))
print("Pictures testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(bert_vectors,voxels_w_w,voxels_w_p,voxels_w_s)
print("Wordclouds training accuaracy:",round(acc,2))
print("Wordclouds final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Pictures testing accuracy:",round(acc1,2))
print()

"""### Using roberta vectors"""

fmri_pict = loadmat('../input/data/M03/inf_voxels/M03_roberta_concepts_pictures.mat')
fmri_wc = loadmat('../input/data/M03/inf_voxels/M03_roberta_concepts_wordclouds.mat')
fmri_sent = loadmat('../input/data/M03/inf_voxels/M03_roberta_concepts_sentences.mat')

voxels_p_p = fmri_pict['voxels_pictures_final']
voxels_p_s = fmri_pict['voxels_sentences_final']
voxels_p_w = fmri_pict['voxels_wordclouds_final']

voxels_w_p = fmri_wc['voxels_pictures_final']
voxels_w_s = fmri_wc['voxels_sentences_final']
voxels_w_w = fmri_wc['voxels_wordclouds_final']

voxels_s_p = fmri_sent['voxels_pictures_final']
voxels_s_s = fmri_sent['voxels_sentences_final']
voxels_s_w = fmri_sent['voxels_wordclouds_final']

acc,acc1,acc2,fin_acc = train(roberta_vectors,voxels_p_p,voxels_p_w,voxels_p_s)
print("Pictures training accuaracy:",round(acc,2))
print("Pictures final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(roberta_vectors,voxels_s_s,voxels_s_w,voxels_s_p)
print("Sentences training accuaracy:",round(acc,2))
print("Sentences final training accuaracy:",round(fin_acc,2))
print("Pictures testing accuracy:",round(acc2,2))
print("Wordclouds testing accuracy:",round(acc1,2))
print()

acc,acc1,acc2,fin_acc = train(roberta_vectors,voxels_w_w,voxels_w_p,voxels_w_s)
print("Wordclouds training accuaracy:",round(acc,2))
print("Wordclouds final training accuaracy:",round(fin_acc,2))
print("Sentences testing accuracy:",round(acc2,2))
print("Pictures testing accuracy:",round(acc1,2))
print()

